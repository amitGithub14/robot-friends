{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","item","key","SearchBox","props","type","placeholder","onChange","changed","Scroll","style","overflowY","borderTop","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","React","useState","searchfields","robotState","setRobotState","useEffect","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","event","console","log","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"+MAgBeA,EAfF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,WACzD,6BACE,4BAAKJ,GACL,2BACGD,EACAE,MCAII,EANE,SAAC,GAChB,OAD+B,EAAbC,OACJC,KAAI,SAACC,GAAD,OAChB,kBAAC,EAAD,CAAMC,IAAKD,EAAKT,GAAIA,GAAIS,EAAKT,GAAIC,KAAMQ,EAAKR,KAAMC,MAAOO,EAAKP,YCUnDS,EAbG,SAACC,GACjB,OACE,yBAAKT,UAAU,OACb,2BACEA,UAAU,mCACVU,KAAK,SACLC,YAAY,cACZC,SAAUH,EAAMI,YCOTC,EAdA,SAACL,GACd,OACE,yBACEM,MAAO,CACLC,UAAW,SACXC,UAAW,kBACXC,OAAQ,UAGTT,EAAMU,W,0CCSEC,E,kDAjBb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CAAEC,UAAU,GAFR,E,8DAKDC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,8DAEFG,KAAKhB,MAAMU,a,GAdMQ,aC4CbC,EArCH,SAACnB,GAAW,IAAD,EACeoB,IAAMC,SAAS,CACjD1B,OAAQ,GACR2B,aAAc,KAHK,mBACdC,EADc,KACFC,EADE,KAMrBJ,IAAMK,WAAU,WACdC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAWN,EAAc,CAAE7B,OAAQmC,EAAOR,aAAc,UAC/D,IAEH,IAOMS,EAAiBR,EAAW5B,OAAOqC,QAAO,SAACC,GAC/C,OAAOA,EAAM5C,KACV6C,cACAC,SAASZ,EAAWD,aAAaY,kBAEtC,OACE,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWa,QAfW,SAACgC,GACzBC,QAAQC,IAAI,gBACZd,EAAc,CACZ7B,OAAQ4B,EAAW5B,OACnB2B,aAAcc,EAAMG,OAAOC,WAY3B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU7C,OAAQoC,QC3BRU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLuB,QAAQvB,MAAMA,EAAM2C,a","file":"static/js/main.27b45c99.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>\r\n          {id}\r\n          {email}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return robots.map((item) => (\r\n    <Card key={item.id} id={item.id} name={item.name} email={item.email} />\r\n  ));\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = (props) => {\r\n  return (\r\n    <div className=\"pa3\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"find robots\"\r\n        onChange={props.changed}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        borderTop: \"1px solid black\",\r\n        height: \"500px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Opps something wrong happened!</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport \"./App.css\";\r\nimport \"tachyons\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\n//import { robots } from \"./robots\";\r\n\r\nconst App = (props) => {\r\n  const [robotState, setRobotState] = React.useState({\r\n    robots: [],\r\n    searchfields: \"\",\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => setRobotState({ robots: users, searchfields: \"\" }));\r\n  }, []);\r\n\r\n  const handleRobotSearch = (event) => {\r\n    console.log(\"handleChange\");\r\n    setRobotState({\r\n      robots: robotState.robots,\r\n      searchfields: event.target.value,\r\n    });\r\n  };\r\n  const filteredRobots = robotState.robots.filter((robot) => {\r\n    return robot.name\r\n      .toLowerCase()\r\n      .includes(robotState.searchfields.toLowerCase());\r\n  });\r\n  return (\r\n    <div className=\"tc\">\r\n      <h1 className=\"f1\">ROBO FRIENDS</h1>\r\n      <SearchBox changed={handleRobotSearch} />\r\n      <Scroll>\r\n        <ErrorBoundary>\r\n          <CardList robots={filteredRobots} />\r\n        </ErrorBoundary>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}